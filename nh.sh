#!/usr/bin/env bash
set -euo pipefail

# ===============================
# Neo-Hydraulik - Fix & Build v2
# ===============================
# Features:
# - Verzeichnis- & Struktur-Checks (immer zuerst)
# - settings.gradle auf nur :app trimmen (mit Repos im settings)
# - android/app/build.gradle minimal & korrekt (mit Marker)
# - Cordova-Gradle-Apply-Pfad reparieren
# - Capacitor-Android-Dep eindeutig (Projekt :capacitor-android vermeiden)
# - Gradle Wrapper & Rechte prüfen
# - SDK-Lizenzen (Termux/Proot kompatibel)
# - Reports in ./reports/
# - Modi: --audit (nur prüfen), --fix (prüfen+reparieren), --build (auch bauen), --clean
#
# Aufrufbeispiele:
#   bash nh-v2.sh --audit
#   bash nh-v2.sh --fix
#   bash nh-v2.sh --fix --build
#   bash nh-v2.sh --clean --build
#
# Optional: Umgebungs-Overrides
#   ANDROID_SDK_ROOT=/opt/android-sdk JAVA_HOME=/usr/lib/jvm/java-21-openjdk-arm64 bash nh-v2.sh --build

# -------------------------------
# UI helpers
# -------------------------------
section(){ printf "\n%s\n" "------------------------------------------------------------"; echo "### $*"; section_line=1; }
ok(){ echo -e "✅ $*"; }
warn(){ echo -e "⚠️  $*"; }
err(){ echo -e "❌ $*" >&2; }
die(){ err "$*"; exit 1; }

# -------------------------------
# Flags
# -------------------------------
DO_AUDIT=false
DO_FIX=false
DO_BUILD=false
DO_CLEAN=false

for a in "$@"; do
  case "$a" in
    --audit) DO_AUDIT=true ;;
    --fix) DO_FIX=true ;;
    --build) DO_BUILD=true ;;
    --clean) DO_CLEAN=true ;;
    *) die "Unbekannte Option: $a" ;;
  esac
done
if ! $DO_AUDIT && ! $DO_FIX && ! $DO_BUILD && ! $DO_CLEAN; then
  # Default: fix + build (am bequemsten)
  DO_FIX=true
  DO_BUILD=true
fi

# -------------------------------
# Report setup
# -------------------------------
mkdir -p reports
TS="$(date +%Y%m%d_%H%M%S)"
REPORT="reports/nh_report_${TS}.txt"
exec > >(tee -a "$REPORT") 2>&1

section "Kontext"
echo "pwd: $(pwd)"
if [ -d .git ]; then
  echo "Git Root: $(pwd)"
else
  warn "Kein .git Ordner – ist ok, aber Git-Status entfällt."
fi

# -------------------------------
# 0) Repo-Root-Check
# -------------------------------
section "Struktur-Check"
[ -f package.json ] || die "package.json fehlt – bitte ins Projekt-Root wechseln!"
ok "package.json gefunden"

# Android Strukturen
[ -d android ] || { warn "android/ fehlt – lege an"; mkdir -p android/app/src/main; }
[ -d android/app ] || { warn "android/app fehlt – lege an"; mkdir -p android/app/src/main; }

# dist Assets (für cap sync)
[ -d dist ] || warn "dist/ fehlt (Vite Build). Für APK ist das egal, aber cap sync braucht es."

# -------------------------------
# 1) Node & Capacitor-Infos
# -------------------------------
section "Node & Capacitor"
node -v || warn "node nicht gefunden"
npm -v || warn "npm nicht gefunden"

CAPV="(unbekannt)"
if [ -f package.json ]; then
  CAPV=$(node -e 'try{let p=require("./package.json");let v=(p.dependencies&&p.dependencies["@capacitor/android"])||(p.devDependencies&&p.devDependencies["@capacitor/android"]); if(v){console.log(v.replace(/^[\^~]/,""))}else{console.log("(nicht in package.json)")}}catch(e){console.log("(parse-fehler)")}')
fi
echo "@capacitor/android (package.json): $CAPV"

# -------------------------------
# 2) settings.gradle – nur :app
# -------------------------------
section "Gradle: settings.gradle"
SETTINGS="settings.gradle"
if [ ! -f "$SETTINGS" ]; then
  warn "settings.gradle fehlt – schreibe Minimalversion"
  cat > "$SETTINGS" <<'EOF'
pluginManagement {
  repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
  }
}
dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
  repositories {
    google()
    mavenCentral()
  }
}
rootProject.name = "neo-hydraulik"
include(":app")
project(":app").projectDir = new File("android/app")
EOF
else
  cp -n "$SETTINGS" "${SETTINGS}.bak" || true
  # idempotent ersetzen
  cat > "$SETTINGS" <<'EOF'
pluginManagement {
  repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
  }
}
dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
  repositories {
    google()
    mavenCentral()
  }
}
rootProject.name = "neo-hydraulik"
include(":app")
project(":app").projectDir = new File("android/app")
EOF
fi
ok "settings.gradle bereit"

# -------------------------------
# 3) android/app/build.gradle (minimal, stabil)
# -------------------------------
section "Gradle: android/app/build.gradle"
APP_GRADLE="android/app/build.gradle"
cp -n "$APP_GRADLE" "${APP_GRADLE}.bak" 2>/dev/null || true

cat > "$APP_GRADLE" <<'EOF'
// GENERATED by nh-v2.sh – DO NOT EDIT MANUALLY
plugins {
  id "com.android.application"
}

android {
  namespace "com.neohydraulik.game"
  compileSdk 34

  defaultConfig {
    applicationId "com.neohydraulik.game"
    minSdk 24
    targetSdk 34
    versionCode 1
    versionName "1.0"
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    debug { minifyEnabled false }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }
}

dependencies {
  // UI/AndroidX
  implementation "androidx.core:core-ktx:1.13.1"
  implementation "androidx.appcompat:appcompat:1.7.0"
  implementation "com.google.android.material:material:1.12.0"

  // Capacitor Android (stabil via Maven)
  implementation "com.getcapacitor:capacitor-android:5.7.8"
}
EOF
ok "android/app/build.gradle geschrieben"

# -------------------------------
# 4) capacitor.build.gradle – Cordova-Apply fixen
# -------------------------------
section "Gradle: android/app/capacitor.build.gradle"
CAP_BUILD="android/app/capacitor.build.gradle"
if [ ! -f "$CAP_BUILD" ]; then
  warn "capcitor.build.gradle fehlt – erzeuge neutralen Stub"
  cat > "$CAP_BUILD" <<'EOF'
// DO NOT EDIT THIS FILE! IT IS GENERATED EACH TIME "capacitor update" IS RUN

android {
  compileOptions {
      sourceCompatibility JavaVersion.VERSION_17
      targetCompatibility JavaVersion.VERSION_17
  }
}

// Der Apply-Pfad ist relativ zu android/app/
apply from: "../capacitor-cordova-android-plugins/cordova.variables.gradle"

dependencies {
}

if (hasProperty('postBuildExtras')) {
  postBuildExtras()
}
EOF
else
  # Sicherstellen, dass der Apply-Pfad korrekt ist
  sed -i 's|apply from: ".*cordova\.variables\.gradle"|apply from: "../capacitor-cordova-android-plugins/cordova.variables.gradle"|' "$CAP_BUILD" || true
fi
ok "capcitor.build.gradle ok (Apply-Pfad relativ zu android/app/)"

# -------------------------------
# 5) Gradle Wrapper & Rechte
# -------------------------------
section "Gradle Wrapper"
if [ ! -f gradlew ]; then
  warn "./gradlew fehlte – initialisiere Wrapper"
  # Minimal: Gradle Wrapper via gradle wrapper wäre hübsch – hier einfacher Fallback
  die "Gradle Wrapper fehlt – bitte 'gradle wrapper' im Projekt ausführen oder gradlew hinzufügen."
fi
chmod +x gradlew
ok "gradlew vorhanden & ausführbar"

# -------------------------------
# 6) Android SDK & Lizenzen
# -------------------------------
section "Java & Android SDK"
if [ -z "${JAVA_HOME:-}" ]; then
  # Termux default (17) ist ok; in Proot meist /usr/lib/jvm/...
  warn "JAVA_HOME nicht gesetzt – versuche systemweit"
else
  ok "JAVA_HOME: $JAVA_HOME"
fi

if [ -z "${ANDROID_SDK_ROOT:-}" ]; then
  # Termux-Standard
  if [ -d "$HOME/Android/Sdk" ]; then
    export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
  elif [ -d "/opt/android-sdk" ]; then
    export ANDROID_SDK_ROOT="/opt/android-sdk"
  fi
fi
[ -n "${ANDROID_SDK_ROOT:-}" ] || warn "ANDROID_SDK_ROOT nicht gesetzt"
echo "ANDROID_SDK_ROOT: ${ANDROID_SDK_ROOT:-<unset>}"

SDKMANAGER="${ANDROID_SDK_ROOT:-}/cmdline-tools/latest/bin/sdkmanager"
if [ -x "$SDKMANAGER" ]; then
  echo "[INFO] SDK-Lizenzen akzeptieren (idempotent)"
  yes | "$SDKMANAGER" --licenses >/dev/null || true
else
  warn "sdkmanager nicht gefunden bei $SDKMANAGER – Lizenzen werden übersprungen."
fi

# -------------------------------
# 7) Audit / Build
# -------------------------------
section "Audit Zusammenfassung"
echo "Flags: audit=$DO_AUDIT fix=$DO_FIX build=$DO_BUILD clean=$DO_CLEAN"
echo "Report: $REPORT"

if $DO_CLEAN; then
  section "Gradle Clean"
  ./gradlew --no-daemon :app:clean || true
fi

if $DO_BUILD; then
  section "Build :app Debug APK"
  # Minimal-Tasks-Liste vorher/nachher loggen
  ./gradlew --no-daemon :app:tasks --all || true
  echo "---- BUILD START ----"
  ./gradlew --no-daemon :app:assembleDebug
  echo "---- BUILD END ----"

  # APK auffinden
  echo "[INFO] Suche APK:"
  find android/app -type f -name "*debug*.apk" -maxdepth 3 2>/dev/null | sed 's/^/[APK] /' || true
fi

section "Fazit"
echo "✓ Durchlauf beendet. Falls Fehler: oben in den Sections schauen."
echo "[HINWEIS] Diesen Report findest du unter: $REPORT"
